/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.hops.examples.flink;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 53690138378649062L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"transaction\",\"namespace\":\"io.hops.examples.flink\",\"fields\":[{\"name\":\"address\",\"type\":[{\"type\":\"record\",\"name\":\"address\",\"fields\":[{\"name\":\"city\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"country\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"postcode\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]},\"null\"]},{\"name\":\"amount\",\"type\":[\"double\",\"null\"]},{\"name\":\"balance\",\"type\":[\"double\",\"null\"]},{\"name\":\"bookingDate\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"categorisations\",\"type\":[{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"categorisations\",\"fields\":[{\"name\":\"code\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"confidence\",\"type\":[\"double\",\"null\"]},{\"name\":\"name\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"scheme\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]},\"null\"]},\"null\"]},{\"name\":\"codes\",\"type\":[{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"codes\",\"fields\":[{\"name\":\"code\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"scheme\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"subCode\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]},\"null\"]},\"null\"]},{\"name\":\"id\",\"type\":[\"long\",\"null\"]},{\"name\":\"merchant\",\"type\":[{\"type\":\"record\",\"name\":\"merchant\",\"fields\":[{\"name\":\"isoCode\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"name\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]},\"null\"]},{\"name\":\"ownedItemId\",\"type\":[\"long\",\"null\"]},{\"name\":\"status\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"transaction_uuid\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"createdDate\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"currency\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"descriptions\",\"type\":[{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"descriptions\",\"fields\":[{\"name\":\"scheme\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"text\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]},\"null\"]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<transaction> ENCODER =
      new BinaryMessageEncoder<transaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<transaction> DECODER =
      new BinaryMessageDecoder<transaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<transaction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this transaction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a transaction from a ByteBuffer. */
  public static transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public io.hops.examples.flink.address address;
  @Deprecated public java.lang.Double amount;
  @Deprecated public java.lang.Double balance;
  @Deprecated public java.lang.String bookingDate;
  @Deprecated public java.util.List<io.hops.examples.flink.categorisations> categorisations;
  @Deprecated public java.util.List<io.hops.examples.flink.codes> codes;
  @Deprecated public java.lang.Long id;
  @Deprecated public io.hops.examples.flink.merchant merchant;
  @Deprecated public java.lang.Long ownedItemId;
  @Deprecated public java.lang.String status;
  @Deprecated public java.lang.String transaction_uuid;
  @Deprecated public java.lang.String createdDate;
  @Deprecated public java.lang.String currency;
  @Deprecated public java.util.List<io.hops.examples.flink.descriptions> descriptions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public transaction() {}

  /**
   * All-args constructor.
   * @param address The new value for address
   * @param amount The new value for amount
   * @param balance The new value for balance
   * @param bookingDate The new value for bookingDate
   * @param categorisations The new value for categorisations
   * @param codes The new value for codes
   * @param id The new value for id
   * @param merchant The new value for merchant
   * @param ownedItemId The new value for ownedItemId
   * @param status The new value for status
   * @param transaction_uuid The new value for transaction_uuid
   * @param createdDate The new value for createdDate
   * @param currency The new value for currency
   * @param descriptions The new value for descriptions
   */
  public transaction(io.hops.examples.flink.address address, java.lang.Double amount, java.lang.Double balance, java.lang.String bookingDate, java.util.List<io.hops.examples.flink.categorisations> categorisations, java.util.List<io.hops.examples.flink.codes> codes, java.lang.Long id, io.hops.examples.flink.merchant merchant, java.lang.Long ownedItemId, java.lang.String status, java.lang.String transaction_uuid, java.lang.String createdDate, java.lang.String currency, java.util.List<io.hops.examples.flink.descriptions> descriptions) {
    this.address = address;
    this.amount = amount;
    this.balance = balance;
    this.bookingDate = bookingDate;
    this.categorisations = categorisations;
    this.codes = codes;
    this.id = id;
    this.merchant = merchant;
    this.ownedItemId = ownedItemId;
    this.status = status;
    this.transaction_uuid = transaction_uuid;
    this.createdDate = createdDate;
    this.currency = currency;
    this.descriptions = descriptions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return address;
    case 1: return amount;
    case 2: return balance;
    case 3: return bookingDate;
    case 4: return categorisations;
    case 5: return codes;
    case 6: return id;
    case 7: return merchant;
    case 8: return ownedItemId;
    case 9: return status;
    case 10: return transaction_uuid;
    case 11: return createdDate;
    case 12: return currency;
    case 13: return descriptions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: address = (io.hops.examples.flink.address)value$; break;
    case 1: amount = (java.lang.Double)value$; break;
    case 2: balance = (java.lang.Double)value$; break;
    case 3: bookingDate = (java.lang.String)value$; break;
    case 4: categorisations = (java.util.List<io.hops.examples.flink.categorisations>)value$; break;
    case 5: codes = (java.util.List<io.hops.examples.flink.codes>)value$; break;
    case 6: id = (java.lang.Long)value$; break;
    case 7: merchant = (io.hops.examples.flink.merchant)value$; break;
    case 8: ownedItemId = (java.lang.Long)value$; break;
    case 9: status = (java.lang.String)value$; break;
    case 10: transaction_uuid = (java.lang.String)value$; break;
    case 11: createdDate = (java.lang.String)value$; break;
    case 12: currency = (java.lang.String)value$; break;
    case 13: descriptions = (java.util.List<io.hops.examples.flink.descriptions>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public io.hops.examples.flink.address getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(io.hops.examples.flink.address value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'balance' field.
   * @return The value of the 'balance' field.
   */
  public java.lang.Double getBalance() {
    return balance;
  }

  /**
   * Sets the value of the 'balance' field.
   * @param value the value to set.
   */
  public void setBalance(java.lang.Double value) {
    this.balance = value;
  }

  /**
   * Gets the value of the 'bookingDate' field.
   * @return The value of the 'bookingDate' field.
   */
  public java.lang.String getBookingDate() {
    return bookingDate;
  }

  /**
   * Sets the value of the 'bookingDate' field.
   * @param value the value to set.
   */
  public void setBookingDate(java.lang.String value) {
    this.bookingDate = value;
  }

  /**
   * Gets the value of the 'categorisations' field.
   * @return The value of the 'categorisations' field.
   */
  public java.util.List<io.hops.examples.flink.categorisations> getCategorisations() {
    return categorisations;
  }

  /**
   * Sets the value of the 'categorisations' field.
   * @param value the value to set.
   */
  public void setCategorisations(java.util.List<io.hops.examples.flink.categorisations> value) {
    this.categorisations = value;
  }

  /**
   * Gets the value of the 'codes' field.
   * @return The value of the 'codes' field.
   */
  public java.util.List<io.hops.examples.flink.codes> getCodes() {
    return codes;
  }

  /**
   * Sets the value of the 'codes' field.
   * @param value the value to set.
   */
  public void setCodes(java.util.List<io.hops.examples.flink.codes> value) {
    this.codes = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'merchant' field.
   * @return The value of the 'merchant' field.
   */
  public io.hops.examples.flink.merchant getMerchant() {
    return merchant;
  }

  /**
   * Sets the value of the 'merchant' field.
   * @param value the value to set.
   */
  public void setMerchant(io.hops.examples.flink.merchant value) {
    this.merchant = value;
  }

  /**
   * Gets the value of the 'ownedItemId' field.
   * @return The value of the 'ownedItemId' field.
   */
  public java.lang.Long getOwnedItemId() {
    return ownedItemId;
  }

  /**
   * Sets the value of the 'ownedItemId' field.
   * @param value the value to set.
   */
  public void setOwnedItemId(java.lang.Long value) {
    this.ownedItemId = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'transaction_uuid' field.
   * @return The value of the 'transaction_uuid' field.
   */
  public java.lang.String getTransactionUuid() {
    return transaction_uuid;
  }

  /**
   * Sets the value of the 'transaction_uuid' field.
   * @param value the value to set.
   */
  public void setTransactionUuid(java.lang.String value) {
    this.transaction_uuid = value;
  }

  /**
   * Gets the value of the 'createdDate' field.
   * @return The value of the 'createdDate' field.
   */
  public java.lang.String getCreatedDate() {
    return createdDate;
  }

  /**
   * Sets the value of the 'createdDate' field.
   * @param value the value to set.
   */
  public void setCreatedDate(java.lang.String value) {
    this.createdDate = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.String getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'descriptions' field.
   * @return The value of the 'descriptions' field.
   */
  public java.util.List<io.hops.examples.flink.descriptions> getDescriptions() {
    return descriptions;
  }

  /**
   * Sets the value of the 'descriptions' field.
   * @param value the value to set.
   */
  public void setDescriptions(java.util.List<io.hops.examples.flink.descriptions> value) {
    this.descriptions = value;
  }

  /**
   * Creates a new transaction RecordBuilder.
   * @return A new transaction RecordBuilder
   */
  public static io.hops.examples.flink.transaction.Builder newBuilder() {
    return new io.hops.examples.flink.transaction.Builder();
  }

  /**
   * Creates a new transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new transaction RecordBuilder
   */
  public static io.hops.examples.flink.transaction.Builder newBuilder(io.hops.examples.flink.transaction.Builder other) {
    return new io.hops.examples.flink.transaction.Builder(other);
  }

  /**
   * Creates a new transaction RecordBuilder by copying an existing transaction instance.
   * @param other The existing instance to copy.
   * @return A new transaction RecordBuilder
   */
  public static io.hops.examples.flink.transaction.Builder newBuilder(io.hops.examples.flink.transaction other) {
    return new io.hops.examples.flink.transaction.Builder(other);
  }

  /**
   * RecordBuilder for transaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<transaction>
    implements org.apache.avro.data.RecordBuilder<transaction> {

    private io.hops.examples.flink.address address;
    private io.hops.examples.flink.address.Builder addressBuilder;
    private java.lang.Double amount;
    private java.lang.Double balance;
    private java.lang.String bookingDate;
    private java.util.List<io.hops.examples.flink.categorisations> categorisations;
    private java.util.List<io.hops.examples.flink.codes> codes;
    private java.lang.Long id;
    private io.hops.examples.flink.merchant merchant;
    private io.hops.examples.flink.merchant.Builder merchantBuilder;
    private java.lang.Long ownedItemId;
    private java.lang.String status;
    private java.lang.String transaction_uuid;
    private java.lang.String createdDate;
    private java.lang.String currency;
    private java.util.List<io.hops.examples.flink.descriptions> descriptions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.hops.examples.flink.transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (other.hasAddressBuilder()) {
        this.addressBuilder = io.hops.examples.flink.address.newBuilder(other.getAddressBuilder());
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.balance)) {
        this.balance = data().deepCopy(fields()[2].schema(), other.balance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bookingDate)) {
        this.bookingDate = data().deepCopy(fields()[3].schema(), other.bookingDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.categorisations)) {
        this.categorisations = data().deepCopy(fields()[4].schema(), other.categorisations);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.codes)) {
        this.codes = data().deepCopy(fields()[5].schema(), other.codes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.id)) {
        this.id = data().deepCopy(fields()[6].schema(), other.id);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.merchant)) {
        this.merchant = data().deepCopy(fields()[7].schema(), other.merchant);
        fieldSetFlags()[7] = true;
      }
      if (other.hasMerchantBuilder()) {
        this.merchantBuilder = io.hops.examples.flink.merchant.newBuilder(other.getMerchantBuilder());
      }
      if (isValidValue(fields()[8], other.ownedItemId)) {
        this.ownedItemId = data().deepCopy(fields()[8].schema(), other.ownedItemId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.transaction_uuid)) {
        this.transaction_uuid = data().deepCopy(fields()[10].schema(), other.transaction_uuid);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[11].schema(), other.createdDate);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.currency)) {
        this.currency = data().deepCopy(fields()[12].schema(), other.currency);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.descriptions)) {
        this.descriptions = data().deepCopy(fields()[13].schema(), other.descriptions);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(io.hops.examples.flink.transaction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      this.addressBuilder = null;
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.balance)) {
        this.balance = data().deepCopy(fields()[2].schema(), other.balance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bookingDate)) {
        this.bookingDate = data().deepCopy(fields()[3].schema(), other.bookingDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.categorisations)) {
        this.categorisations = data().deepCopy(fields()[4].schema(), other.categorisations);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.codes)) {
        this.codes = data().deepCopy(fields()[5].schema(), other.codes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.id)) {
        this.id = data().deepCopy(fields()[6].schema(), other.id);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.merchant)) {
        this.merchant = data().deepCopy(fields()[7].schema(), other.merchant);
        fieldSetFlags()[7] = true;
      }
      this.merchantBuilder = null;
      if (isValidValue(fields()[8], other.ownedItemId)) {
        this.ownedItemId = data().deepCopy(fields()[8].schema(), other.ownedItemId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.transaction_uuid)) {
        this.transaction_uuid = data().deepCopy(fields()[10].schema(), other.transaction_uuid);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[11].schema(), other.createdDate);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.currency)) {
        this.currency = data().deepCopy(fields()[12].schema(), other.currency);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.descriptions)) {
        this.descriptions = data().deepCopy(fields()[13].schema(), other.descriptions);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public io.hops.examples.flink.address getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setAddress(io.hops.examples.flink.address value) {
      validate(fields()[0], value);
      this.addressBuilder = null;
      this.address = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'address' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.hops.examples.flink.address.Builder getAddressBuilder() {
      if (addressBuilder == null) {
        if (hasAddress()) {
          setAddressBuilder(io.hops.examples.flink.address.newBuilder(address));
        } else {
          setAddressBuilder(io.hops.examples.flink.address.newBuilder());
        }
      }
      return addressBuilder;
    }

    /**
     * Sets the Builder instance for the 'address' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.hops.examples.flink.transaction.Builder setAddressBuilder(io.hops.examples.flink.address.Builder value) {
      clearAddress();
      addressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'address' field has an active Builder instance
     * @return True if the 'address' field has an active Builder instance
     */
    public boolean hasAddressBuilder() {
      return addressBuilder != null;
    }

    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearAddress() {
      address = null;
      addressBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setAmount(java.lang.Double value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'balance' field.
      * @return The value.
      */
    public java.lang.Double getBalance() {
      return balance;
    }

    /**
      * Sets the value of the 'balance' field.
      * @param value The value of 'balance'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setBalance(java.lang.Double value) {
      validate(fields()[2], value);
      this.balance = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'balance' field has been set.
      * @return True if the 'balance' field has been set, false otherwise.
      */
    public boolean hasBalance() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'balance' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearBalance() {
      balance = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingDate' field.
      * @return The value.
      */
    public java.lang.String getBookingDate() {
      return bookingDate;
    }

    /**
      * Sets the value of the 'bookingDate' field.
      * @param value The value of 'bookingDate'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setBookingDate(java.lang.String value) {
      validate(fields()[3], value);
      this.bookingDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingDate' field has been set.
      * @return True if the 'bookingDate' field has been set, false otherwise.
      */
    public boolean hasBookingDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bookingDate' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearBookingDate() {
      bookingDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'categorisations' field.
      * @return The value.
      */
    public java.util.List<io.hops.examples.flink.categorisations> getCategorisations() {
      return categorisations;
    }

    /**
      * Sets the value of the 'categorisations' field.
      * @param value The value of 'categorisations'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setCategorisations(java.util.List<io.hops.examples.flink.categorisations> value) {
      validate(fields()[4], value);
      this.categorisations = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'categorisations' field has been set.
      * @return True if the 'categorisations' field has been set, false otherwise.
      */
    public boolean hasCategorisations() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'categorisations' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearCategorisations() {
      categorisations = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'codes' field.
      * @return The value.
      */
    public java.util.List<io.hops.examples.flink.codes> getCodes() {
      return codes;
    }

    /**
      * Sets the value of the 'codes' field.
      * @param value The value of 'codes'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setCodes(java.util.List<io.hops.examples.flink.codes> value) {
      validate(fields()[5], value);
      this.codes = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'codes' field has been set.
      * @return True if the 'codes' field has been set, false otherwise.
      */
    public boolean hasCodes() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'codes' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearCodes() {
      codes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setId(java.lang.Long value) {
      validate(fields()[6], value);
      this.id = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearId() {
      id = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchant' field.
      * @return The value.
      */
    public io.hops.examples.flink.merchant getMerchant() {
      return merchant;
    }

    /**
      * Sets the value of the 'merchant' field.
      * @param value The value of 'merchant'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setMerchant(io.hops.examples.flink.merchant value) {
      validate(fields()[7], value);
      this.merchantBuilder = null;
      this.merchant = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'merchant' field has been set.
      * @return True if the 'merchant' field has been set, false otherwise.
      */
    public boolean hasMerchant() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'merchant' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.hops.examples.flink.merchant.Builder getMerchantBuilder() {
      if (merchantBuilder == null) {
        if (hasMerchant()) {
          setMerchantBuilder(io.hops.examples.flink.merchant.newBuilder(merchant));
        } else {
          setMerchantBuilder(io.hops.examples.flink.merchant.newBuilder());
        }
      }
      return merchantBuilder;
    }

    /**
     * Sets the Builder instance for the 'merchant' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.hops.examples.flink.transaction.Builder setMerchantBuilder(io.hops.examples.flink.merchant.Builder value) {
      clearMerchant();
      merchantBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'merchant' field has an active Builder instance
     * @return True if the 'merchant' field has an active Builder instance
     */
    public boolean hasMerchantBuilder() {
      return merchantBuilder != null;
    }

    /**
      * Clears the value of the 'merchant' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearMerchant() {
      merchant = null;
      merchantBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ownedItemId' field.
      * @return The value.
      */
    public java.lang.Long getOwnedItemId() {
      return ownedItemId;
    }

    /**
      * Sets the value of the 'ownedItemId' field.
      * @param value The value of 'ownedItemId'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setOwnedItemId(java.lang.Long value) {
      validate(fields()[8], value);
      this.ownedItemId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ownedItemId' field has been set.
      * @return True if the 'ownedItemId' field has been set, false otherwise.
      */
    public boolean hasOwnedItemId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'ownedItemId' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearOwnedItemId() {
      ownedItemId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setStatus(java.lang.String value) {
      validate(fields()[9], value);
      this.status = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearStatus() {
      status = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_uuid' field.
      * @return The value.
      */
    public java.lang.String getTransactionUuid() {
      return transaction_uuid;
    }

    /**
      * Sets the value of the 'transaction_uuid' field.
      * @param value The value of 'transaction_uuid'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setTransactionUuid(java.lang.String value) {
      validate(fields()[10], value);
      this.transaction_uuid = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_uuid' field has been set.
      * @return True if the 'transaction_uuid' field has been set, false otherwise.
      */
    public boolean hasTransactionUuid() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'transaction_uuid' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearTransactionUuid() {
      transaction_uuid = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdDate' field.
      * @return The value.
      */
    public java.lang.String getCreatedDate() {
      return createdDate;
    }

    /**
      * Sets the value of the 'createdDate' field.
      * @param value The value of 'createdDate'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setCreatedDate(java.lang.String value) {
      validate(fields()[11], value);
      this.createdDate = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'createdDate' field has been set.
      * @return True if the 'createdDate' field has been set, false otherwise.
      */
    public boolean hasCreatedDate() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'createdDate' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearCreatedDate() {
      createdDate = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }

    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setCurrency(java.lang.String value) {
      validate(fields()[12], value);
      this.currency = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'descriptions' field.
      * @return The value.
      */
    public java.util.List<io.hops.examples.flink.descriptions> getDescriptions() {
      return descriptions;
    }

    /**
      * Sets the value of the 'descriptions' field.
      * @param value The value of 'descriptions'.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder setDescriptions(java.util.List<io.hops.examples.flink.descriptions> value) {
      validate(fields()[13], value);
      this.descriptions = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'descriptions' field has been set.
      * @return True if the 'descriptions' field has been set, false otherwise.
      */
    public boolean hasDescriptions() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'descriptions' field.
      * @return This builder.
      */
    public io.hops.examples.flink.transaction.Builder clearDescriptions() {
      descriptions = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public transaction build() {
      try {
        transaction record = new transaction();
        if (addressBuilder != null) {
          record.address = this.addressBuilder.build();
        } else {
          record.address = fieldSetFlags()[0] ? this.address : (io.hops.examples.flink.address) defaultValue(fields()[0]);
        }
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Double) defaultValue(fields()[1]);
        record.balance = fieldSetFlags()[2] ? this.balance : (java.lang.Double) defaultValue(fields()[2]);
        record.bookingDate = fieldSetFlags()[3] ? this.bookingDate : (java.lang.String) defaultValue(fields()[3]);
        record.categorisations = fieldSetFlags()[4] ? this.categorisations : (java.util.List<io.hops.examples.flink.categorisations>) defaultValue(fields()[4]);
        record.codes = fieldSetFlags()[5] ? this.codes : (java.util.List<io.hops.examples.flink.codes>) defaultValue(fields()[5]);
        record.id = fieldSetFlags()[6] ? this.id : (java.lang.Long) defaultValue(fields()[6]);
        if (merchantBuilder != null) {
          record.merchant = this.merchantBuilder.build();
        } else {
          record.merchant = fieldSetFlags()[7] ? this.merchant : (io.hops.examples.flink.merchant) defaultValue(fields()[7]);
        }
        record.ownedItemId = fieldSetFlags()[8] ? this.ownedItemId : (java.lang.Long) defaultValue(fields()[8]);
        record.status = fieldSetFlags()[9] ? this.status : (java.lang.String) defaultValue(fields()[9]);
        record.transaction_uuid = fieldSetFlags()[10] ? this.transaction_uuid : (java.lang.String) defaultValue(fields()[10]);
        record.createdDate = fieldSetFlags()[11] ? this.createdDate : (java.lang.String) defaultValue(fields()[11]);
        record.currency = fieldSetFlags()[12] ? this.currency : (java.lang.String) defaultValue(fields()[12]);
        record.descriptions = fieldSetFlags()[13] ? this.descriptions : (java.util.List<io.hops.examples.flink.descriptions>) defaultValue(fields()[13]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<transaction>
    READER$ = (org.apache.avro.io.DatumReader<transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
