/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.hops.examples.flink;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class categorisations extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1011087750398127984L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"categorisations\",\"namespace\":\"io.hops.examples.flink\",\"fields\":[{\"name\":\"code\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"confidence\",\"type\":[\"double\",\"null\"]},{\"name\":\"name\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"scheme\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<categorisations> ENCODER =
      new BinaryMessageEncoder<categorisations>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<categorisations> DECODER =
      new BinaryMessageDecoder<categorisations>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<categorisations> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<categorisations> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<categorisations>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this categorisations to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a categorisations from a ByteBuffer. */
  public static categorisations fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String code;
  @Deprecated public java.lang.Double confidence;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String scheme;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public categorisations() {}

  /**
   * All-args constructor.
   * @param code The new value for code
   * @param confidence The new value for confidence
   * @param name The new value for name
   * @param scheme The new value for scheme
   */
  public categorisations(java.lang.String code, java.lang.Double confidence, java.lang.String name, java.lang.String scheme) {
    this.code = code;
    this.confidence = confidence;
    this.name = name;
    this.scheme = scheme;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return confidence;
    case 2: return name;
    case 3: return scheme;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.String)value$; break;
    case 1: confidence = (java.lang.Double)value$; break;
    case 2: name = (java.lang.String)value$; break;
    case 3: scheme = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.String getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.String value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'confidence' field.
   * @return The value of the 'confidence' field.
   */
  public java.lang.Double getConfidence() {
    return confidence;
  }

  /**
   * Sets the value of the 'confidence' field.
   * @param value the value to set.
   */
  public void setConfidence(java.lang.Double value) {
    this.confidence = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'scheme' field.
   * @return The value of the 'scheme' field.
   */
  public java.lang.String getScheme() {
    return scheme;
  }

  /**
   * Sets the value of the 'scheme' field.
   * @param value the value to set.
   */
  public void setScheme(java.lang.String value) {
    this.scheme = value;
  }

  /**
   * Creates a new categorisations RecordBuilder.
   * @return A new categorisations RecordBuilder
   */
  public static io.hops.examples.flink.categorisations.Builder newBuilder() {
    return new io.hops.examples.flink.categorisations.Builder();
  }

  /**
   * Creates a new categorisations RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new categorisations RecordBuilder
   */
  public static io.hops.examples.flink.categorisations.Builder newBuilder(io.hops.examples.flink.categorisations.Builder other) {
    return new io.hops.examples.flink.categorisations.Builder(other);
  }

  /**
   * Creates a new categorisations RecordBuilder by copying an existing categorisations instance.
   * @param other The existing instance to copy.
   * @return A new categorisations RecordBuilder
   */
  public static io.hops.examples.flink.categorisations.Builder newBuilder(io.hops.examples.flink.categorisations other) {
    return new io.hops.examples.flink.categorisations.Builder(other);
  }

  /**
   * RecordBuilder for categorisations instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<categorisations>
    implements org.apache.avro.data.RecordBuilder<categorisations> {

    private java.lang.String code;
    private java.lang.Double confidence;
    private java.lang.String name;
    private java.lang.String scheme;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.hops.examples.flink.categorisations.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.confidence)) {
        this.confidence = data().deepCopy(fields()[1].schema(), other.confidence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scheme)) {
        this.scheme = data().deepCopy(fields()[3].schema(), other.scheme);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing categorisations instance
     * @param other The existing instance to copy.
     */
    private Builder(io.hops.examples.flink.categorisations other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.confidence)) {
        this.confidence = data().deepCopy(fields()[1].schema(), other.confidence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scheme)) {
        this.scheme = data().deepCopy(fields()[3].schema(), other.scheme);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.String getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public io.hops.examples.flink.categorisations.Builder setCode(java.lang.String value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public io.hops.examples.flink.categorisations.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'confidence' field.
      * @return The value.
      */
    public java.lang.Double getConfidence() {
      return confidence;
    }

    /**
      * Sets the value of the 'confidence' field.
      * @param value The value of 'confidence'.
      * @return This builder.
      */
    public io.hops.examples.flink.categorisations.Builder setConfidence(java.lang.Double value) {
      validate(fields()[1], value);
      this.confidence = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'confidence' field has been set.
      * @return True if the 'confidence' field has been set, false otherwise.
      */
    public boolean hasConfidence() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'confidence' field.
      * @return This builder.
      */
    public io.hops.examples.flink.categorisations.Builder clearConfidence() {
      confidence = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.hops.examples.flink.categorisations.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public io.hops.examples.flink.categorisations.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'scheme' field.
      * @return The value.
      */
    public java.lang.String getScheme() {
      return scheme;
    }

    /**
      * Sets the value of the 'scheme' field.
      * @param value The value of 'scheme'.
      * @return This builder.
      */
    public io.hops.examples.flink.categorisations.Builder setScheme(java.lang.String value) {
      validate(fields()[3], value);
      this.scheme = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'scheme' field has been set.
      * @return True if the 'scheme' field has been set, false otherwise.
      */
    public boolean hasScheme() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'scheme' field.
      * @return This builder.
      */
    public io.hops.examples.flink.categorisations.Builder clearScheme() {
      scheme = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public categorisations build() {
      try {
        categorisations record = new categorisations();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.String) defaultValue(fields()[0]);
        record.confidence = fieldSetFlags()[1] ? this.confidence : (java.lang.Double) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.scheme = fieldSetFlags()[3] ? this.scheme : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<categorisations>
    WRITER$ = (org.apache.avro.io.DatumWriter<categorisations>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<categorisations>
    READER$ = (org.apache.avro.io.DatumReader<categorisations>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
